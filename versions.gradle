/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def build_versions = [:]
build_versions.min_sdk = 14
build_versions.compile_sdk = 29
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.3"
ext.build_versions = build_versions

def versions = [:]
ext.versions = versions
versions.appcompat = "1.1.0"
versions.fragment = "1.2.3"
versions.material = "1.0.0"
versions.cardview = "1.0.0"
versions.lifecycle= "2.2.0"
versions.room = "2.2.5"
versions.android_gradle_plugin="3.6.1"
versions.kotlin = "1.3.61"
versions.core_ktx = "1.2.0"
versions.coroutines = "1.3.5"
versions.constraint_layout = "1.1.3"
versions.dagger = "2.27"
versions.robolectric = "4.3.1"
versions.retrofit = "2.8.1"
versions.mockito = "3.3.3"
versions.mockito_all = "1.10.19"
versions.mockito_android = "3.3.3"
versions.mockwebserver = "4.5.0"
versions.arch_core = "2.1.0"
versions.timber = "4.7.1"
versions.navigation = "2.2.2"
versions.glide ="4.11.0"
versions.hamcrest = "2.2"

def deps = [:]
deps.app_compat = "androidx.appcompat:appcompat:${versions.appcompat}"


def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:${versions.fragment}" // Java language implementation
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}" //Kotlin
fragment.testing = "androidx.fragment:fragment-testing:${versions.fragment}" // Testing Fragments in Isolation
deps.fragment = fragment

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:${versions.navigation}"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:${versions.navigation}"
//kotlin
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
// Java language implementation
navigation.fragment = "androidx.navigation:navigation-fragment:${versions.navigation}"
navigation.ui = "androidx.navigation:navigation-ui:${versions.navigation}"
// Testing Navigation androidTestImplementation
navigation.testing = "androidx.navigation:navigation-testing:${versions.navigation}"

navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.navigation}"
deps.navigation = navigation


def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}" // Lifecycles only (without ViewModel or LiveData)
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"  // alternately - if using Java8, use the following instead of lifecycle-compiler
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle}" // For Kotlin use kapt instead of annotationProcessor
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}" // ViewModel
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}" //LiveData
deps.lifecycle = lifecycle


def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:${versions.glide}"
glide.compiler = "com.github.bumptech.glide:compiler:${versions.glide}"
deps.glide = glide

def room = [:]
room.runtime = "androidx.room:room-runtime:${versions.room}" //Room runtime
room.compiler = "androidx.room:room-compiler:${versions.room}" // For Kotlin use kapt instead of annotationProcessor
room.rxjava2 = "androidx.room:room-rxjava2:${versions.room}" //optional - Kotlin Extensions and Coroutines support for Room
room.room_ktx = "androidx.room:room-ktx:${versions.room}" // optional - Kotlin Extensions and Coroutines support for Room
room.guava = "androidx.room:room-guava:${versions.room}" // optional - Guava support for Room, including Optional and ListenableFuture
room.testing = "androidx.room:room-testing:${versions.room}" // Test helpers (testImplementation)
deps.room = room

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}" //
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:${versions.kotlin}"
deps.kotlin = kotlin

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}" // testimplementation
deps.coroutines = coroutines

def dagger =[:]
dagger.runtime = "com.google.dagger:dagger:${versions.dagger}"
dagger.compiler = "com.google.dagger:dagger-compiler:${versions.dagger}"
dagger.android = "com.google.dagger:dagger-android:${versions.dagger}"
dagger.android_support = "com.google.dagger:dagger-android-support:${versions.dagger}"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:${versions.dagger}"
deps.dagger = dagger

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:${versions.retrofit}"
retrofit.gson = "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}"
deps.retrofit = retrofit

def mockito = [:]
mockito.core = "org.mockito:mockito-core:${versions.mockito}"
mockito.all = "org.mockito:mockito-all:${versions.mockito_all}" // mock object library for java
mockito.android = "org.mockito:mockito-android:${versions.mockito_android}" //Mockito for Android
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}" // testImplementation

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:${versions.arch_core}"
arch_core.testing = "androidx.arch.core:core-testing:${versions.arch_core}"
deps.arch_core = arch_core

deps.hamcrest = "org.hamcrest:hamcrest:${versions.hamcrest}"

deps.timber = "com.jakewharton.timber:timber:${versions.timber}"

deps.android_gradle_plugin = "com.android.tools.build:gradle:${versions.android_gradle_plugin}"

deps.material = "com.google.android.material:material:${versions.material}"

deps.cardview = "androidx.cardview:cardview:${versions.cardview}"

deps.core_ktx = "androidx.core:core-ktx:${versions.core_ktx}" // The Core KTX module provides extensions for common libraries that are part of the Android framework.

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"

deps.robolectric = "org.robolectric:robolectric:${versions.robolectric}"

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}
ext.addRepos = this.&addRepos